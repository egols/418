install.packages("sf")
install.packages("plyr")
install.packages("dplyr")
install.packages("spdep")
install.packages("GISTools")
install.packages("raster")
install.packages("maptools")
install.packages("spatstat")
install.packages("tmap")
install.packages("gstat")
install.packages("spgwr")



#Libraries
library(sf)
library(plyr)
library(dplyr)
library(spdep)
library(GISTools)
library(raster)
library(maptools)
library(rgdal)
library(spatstat)
library(sp)
library(tmap)
library(gstat)
library(spgwr)
library(fBasics)
library(gridExtra)
library(grid)
library(gtable)


#Set working directory
#dir <- "Z:/Geog_418/FinalProject"
dir<-"C:/Users/Eli_G/Desktop/GEOG418/finalproject"
setwd(dir)
getwd()

#Reading in particulate matter dataset
pm25 <- read.csv("PM25.csv") #Read in PM2.5 data
#Select only columns 1 and 2
pm25 <- pm25[,1:2]
#Change the column names 
colnames(pm25) <- c("POSTALCODE", "PM25")
pm25 <- na.omit(pm25)

#Reading in postal code shapefile
postalcodes <- shapefile("./BC_Postal_Codes") #Read in related postal code data

#Reading in dissemination tract and income data
income <- read.csv("Income.csv") #Read in census income data  
colnames(income) <- c("DAUID", "Income") #Select only ID and Income columns
census.tracts <- shapefile("./BC_DA.shp") #Read in dissemination tract shapefile
income.tracts <- merge(census.tracts,income, by = "DAUID") #Merge income and dissemination data
nrow(income.tracts) #Determine the number of columns in the dataframe
income.tracts <- income.tracts[!is.na(income.tracts$Income),]
head(income.tracts)


#Select postal codes that fall within dissemination tracts)
postalcodes <- intersect(postalcodes,income.tracts)
plot(postalcodes) #See what the data looks like spatially
head(postalcodes) #See what the data looks like in tabular form

#Join PM2.5 data with postal code data
pm25.spatial <- merge(postalcodes,pm25,by = "POSTALCODE")

#Aggregate the PM2.5 values in each DA in order to have a single value per DA. Here we aggregate based on the mean.
pm25.aggregate <- aggregate((as.numeric(pm25.spatial$PM25)/10)~pm25.spatial$DAUID,FUN=max)

#Re-join aggregated data to the income.tracts layer.
colnames(pm25.aggregate) <- c("DAUID", "PM25AGG") #Select only ID and Income columns
income.pm25 <- merge(income.tracts,pm25.aggregate, by = "DAUID") #Merge income and dissemination data

#Re-join aggregated data to the pm25.spatial points layer.
pm25.points.aggregate <- merge(pm25.spatial, pm25.aggregate, by = "DAUID")

head(pm25.points.aggregate)
plot(pm25.points.aggregate)


##############################
#Create a subsample of the datapoints provided in the PM2.5 dataset using the sample n provided on CourseSpaces
####################

sampleSize=170
spSample <- pm25.points.aggregate[sample(1:length(pm25.points.aggregate),sampleSize),]

plot(spSample)

head(spSample)

####################
##descriptive stats
###################

summary(pm25.points.aggregate$PM25AGG)
summary(income.tracts$Income)

############################
#Create a grid called grd to use in your interpolation
# Create an empty grid where n is the total number of cells


grd <- as.data.frame(spsample(spSample, "regular", n=50000))
names(grd)       <- c("X", "Y")
coordinates(grd) <- c("X", "Y")
gridded(grd)     <- TRUE  # Create SpatialPixel object
fullgrid(grd)    <- TRUE  # Create SpatialGrid object
proj4string(grd) <- proj4string(spSample)


#########################
########################################
#####MORANS I###########
####################

map_Income <- tm_shape(income.tracts) + 
  tm_polygons(col = "Income", 			  #color by variable
              palette = "Spectral",			  #choice of color palette
              n = 6,                    # number of classes
              title = " Median Income", 		 #title for legend
              style = "jenks") + 			 #classification of data others available
  tm_legend(legend.outside=TRUE)

map_Income


png("map_Income.png") #Create an object to print the table to
map_Income
dev.off()

################ 
##neighbours list
########################
crd.nb <- poly2nb(income.tracts)
crd.net <- nb2lines(crd.nb,coords=coordinates(income.tracts)) #uses queens default

########################

crd.lw <- nb2listw(crd.nb, zero.policy = TRUE, style = "W")
print.listw(crd.lw, zero.policy = TRUE) #print output

########################
########################
mi <- moran.test(income.tracts$Income, crd.lw, zero.policy = TRUE, alternative = "two.sided")
mi
#use stats to calculate z score

moran.range <- function(lw) {
  wmat <- listw2mat(lw)
  return(range(eigen((wmat + t(wmat))/2)$value))
}
moran.range(crd.lw) #full range of morans i for the data


mI <- mi$estimate[[1]]
eI <- mi$estimate[[2]]
var <- mi$estimate[[3]]

z <-(mI-eI)/(sqrt(var))


moran_result <- data.frame(name= "moran result", morans_i = mI, estimate_i = eI, variance= var, z_score= z)
write.csv(moran_result, "./moranresult.csv", row.names = FALSE)

########################  

lisa.test <- localmoran(income.tracts$Income, crd.lw)

income.tracts$Ii <- lisa.test[,1]
income.tracts$E.Ii<- lisa.test[,2]
income.tracts$Var.Ii<- lisa.test[,3]
income.tracts$Z.Ii<- lisa.test[,4]
income.tracts$P<- lisa.test[,5]
########################

map_LISA <- tm_shape(income.tracts) + 
  tm_polygons(col = "Ii", 
              title = "Local Moran's I", 
              style = "fisher", 
              palette = "Spectral", n = 6, midpoint= NA)+
  tm_legend(legend.outside= TRUE)


map_LISA

png("map_lisa.png") #Create an object to print the table to
map_LISA
dev.off()
########################





png(paste("moran_plot.png")) #Create an object to print the table to
moran.plot(income.tracts$Income , crd.lw, zero.policy=NULL, spChk=NULL, labels=NULL, xlab="Median Income", 
           ylab="Spatially Lagged Median Income", quiet=NULL)

dev.off()

###########################
########################

map_PM25<- tm_shape(income.tracts) + 
  tm_polygons(col = "lightblue")+
  tm_shape(spSample)+
  tm_dots(col = "PM25AGG",size= 0.5, shape = 20,title = " PM 2.5", 		 #title for legend
              style = "jenks") + 			 #classification of data others available
  tm_legend(legend.outside=TRUE)

map_PM25


############Ordinary Kriging###########
###Ordinary Kriging
## zero order polymnomial - 
###Ordinary Kriging
## zero order polymnomial - 

f.0 <- as.formula(PM25AGG ~ 1)  


var.smpl <- variogram(f.0, spSample, cloud = FALSE) #, cutoff=1000000, width=89900)
dat.fit  <- fit.variogram(var.smpl, fit.ranges = FALSE, fit.sills = FALSE,
                          vgm( model="Exp"))


plot(var.smpl, dat.fit)

# Define the trend model
f.0 <- as.formula(PM25AGG ~ 1) 

# Perform the krige interpolation (note the use of the variogram model
# created in the earlier step)
dat.krg <- krige( f.0, spSample, grd, dat.fit)

# Convert kriged surface to a raster object for clipping
r <- raster(dat.krg)


# Plot the map
tm_shape(r) + 
  tm_raster(n=10, palette="YlOrRd",  
            title="Predicted PM 2.5 \n(in ppm)") +
  tm_shape(spSample) + tm_dots(size=0.2) +
  tm_legend(legend.outside=TRUE)




###########################################
#############################################

#################################################
##Spatial Interpolation with Polynomial Trends
# Define the 1st order polynomial equation

f.1 <- as.formula(PM25AGG ~ X + Y) 

# Add X and Y to P
spSample$X <- coordinates(spSample)[,1]
spSample$Y <- coordinates(spSample)[,2]


# Run the regression model
lm.1 <- lm( f.1, data=spSample)

# Use the regression model output to interpolate the surface
dat.1st <- SpatialGridDataFrame(grd, data.frame(var1.pred = predict(lm.1, newdata=grd))) 

# Clip the interpolated raster to Southern California
r   <- raster(dat.1st)


# Plot the map
tm_shape(r) + 
  tm_raster(n=10, palette="YlOrRd", 
            title="Predicted PM 2.5 \n(in ppm)") +
  tm_shape(spSample) + tm_dots(size=0.2) +
  tm_legend(legend.outside=TRUE)



# Define the 2nd order polynomial equation
f.2 <- as.formula(PM25AGG ~ X + Y + I(X*X)+I(Y*Y) + I(X*Y))

# Add X and Y to P
spSample$X <- coordinates(spSample)[,1]
spSample$Y <- coordinates(spSample)[,2]

# Run the regression model
lm.2 <- lm( f.2, data=spSample)

# Use the regression model output to interpolate the surface
dat.2nd <- SpatialGridDataFrame(grd, data.frame(var1.pred = predict(lm.2, newdata=grd))) 

# make raster

r   <- raster(dat.2nd)


# Plot the map
tm_shape(r) + 
  tm_raster(n=10, palette="YlOrRd", 
            title="Predicted  Pm 2.5 \n(in ppm)") +
  tm_shape(spSample) + tm_dots(size=0.2) +
  tm_legend(legend.outside=TRUE)


#################################################
##Spatial Interpolation with Kriging

## f.1 <- as.formula(value ~ X + Y) 
f.2 <- as.formula(PM25AGG ~ X + Y + I(X*X)+I(Y*Y) + I(X*Y))

var.smpl <- variogram(f.2, spSample, cloud = FALSE) #, cutoff=1000000, width=89900)
dat.fit  <- fit.variogram(var.smpl, fit.ranges = FALSE, fit.sills = FALSE,
                          vgm( model="Sph"))
plot(var.smpl, dat.fit)


# Define the trend model
f.2 <- as.formula(PM25AGG ~ X + Y + I(X*X)+I(Y*Y) + I(X*Y))

# Perform the krige interpolation (note the use of the variogram model
# created in the earlier step)
dat.krg <- krige( f.2, spSample, grd, dat.fit)

# Convert kriged surface to a raster object 
r <- raster(dat.krg)

# Plot the map
tm_shape(r) + 
  tm_raster(n=7, palette="YlOrRd",  
            title="Predicted Pm 2.5 \n(in ppm)") +
  tm_shape(spSample) + tm_dots(size=0.2) +
  tm_legend(legend.outside=TRUE)



##########################################
################################################
#These steps will help you combine the outputs from your spatial interpolation with your income data.

#If you have too many cells, you can reduce the number by aggregating values
step.1 <- aggregate(r, fact=1, fun=mean)
plot(step.1)

#Convert the raster dataset to points #can use r instead of step 1
step.2 <-  rasterToPoints(step.1,fun=NULL, spatial=FALSE, crs=spSample)
step.2 <- as.data.frame(step.2) #convert the point dataset to a spatial dataframe
Coords <- step.2[,c("x", "y")]  #assign coordinates to a new object
crs <- crs(census.tracts) #utilize an existing projection
step.3 <- SpatialPointsDataFrame(coords = Coords, data = step.2, proj4string = crs) #create a spatial points dataframe
step.4 <- aggregate(x=step.3,by=income.tracts, FUN=mean) #aggregate points into census tracts
step.5 <- intersect(step.4,income.tracts)  #get the intersection of step.4 with the income.tracts dataset (this will take a while) 

 #You are now ready to perform a regression
View(step.5@data)

###############################
######Linear Regression##########
################################
#Let's say your dataset with both PM2.5 and Income are stored in a dataset called pm.income.poly.
pm.income.poly <- step.5
names(pm.income.poly)[names(pm.income.poly) == "var1.pred"] <- "PM25"

head(pm.income.poly)

#Plot income and PM2.5 from the pm.income.poly dataset you created
plot(pm.income.poly$PM25~pm.income.poly$Income)


#Notice that there are a lot of NA's in this dataset. If you decide to remove them, use the following line:
pm.income.poly <-  pm.income.poly[!is.na(pm.income.poly$PM25),]

View(pm.income.poly@data)
#Now plot the data again
plot(pm.income.poly$PM25~pm.income.poly$Income)

#Perform a linear regression on the two variables. You should decide which one is dependent.
lm.model <- lm(pm.income.poly$PM25~pm.income.poly$Income)
#Add the regression model to the plot you created
abline(lm.model)
#Get the summary of the results
summary(lm.model)

#You want to determine if the model residuals are spatially clustered. 
#First obtain the residuals from the model
model.resids <- as.data.frame(residuals.lm(lm.model))
#Then add the residuals to your spatialpolygon dataframe
pm.income.poly$residuals <- residuals.lm(lm.model)
#Observe the result to make sure it looks correct
head(pm.income.poly)

#########################
########################################
#####MORANS I###########
####################

map_residuals <- tm_shape(pm.income.poly) + 
  tm_polygons (col = "residuals",palette = "Spectral",n = 6, title = "Residuals", style = "fisher", midpoint=0) + 			 
tm_legend(legend.outside=TRUE)

map_residuals

png("map_residuals.png") #Create an object to print the table to
map_residuals
dev.off()


######################################
###Create Neighbours lists using queens ###########
########################
resid.nb <- poly2nb(pm.income.poly)
resid.net <- nb2lines(resid.nb,coords=coordinates(pm.income.poly)) #uses queens default

########################

resid.lw <- nb2listw(resid.nb, zero.policy = TRUE, style = "W")
print.listw(resid.lw, zero.policy = TRUE) #print output

########################
#####run moran's I
########################
miresid <- moran.test(pm.income.poly$residuals, resid.lw, zero.policy = TRUE, alternative = "two.sided")
miresid
#use stats to calculate z score

resid.moran.range <- function(lw) {
  wmat <- listw2mat(lw)
  return(range(eigen((wmat + t(wmat))/2)$values))
}
resid.moran.range(resid.lw) #full range of morans i for the data


resid.mI <- mi$estimate[[1]]
resid.eI <- mi$estimate[[2]]
resid.var <- mi$estimate[[3]]

resid.z <-(mI-eI)/(sqrt(var))

########################  

lisa.test <- localmoran(pm.income.poly$residuals, resid.lw, zero.policy = TRUE)

pm.income.poly$Ii <- lisa.test[,1]
pm.income.poly$E.Ii<- lisa.test[,2]
pm.income.poly$Var.Ii<- lisa.test[,3]
pm.income.poly$Z.Ii<- lisa.test[,4]
pm.income.poly$P<- lisa.test[,5]
########################

########################





png(paste("moran_plot_resid.png")) #Create an object to print the table to
moran.plot(pm.income.poly$residuals, resid.lw, zero.policy=TRUE, spChk=NULL, labels=NULL, xlab="Residuals", 
           ylab="Spatially Lagged Residuals", quiet=NULL)

dev.off()



#######################################
####Geographically Weighted Regression
###############################################

####Geographically Weighted Regression

#Let's say you are continuing with your data from the regression analysis. 

#The first thing you need to do is to add the polygon coordinates to the spatialpolygondataframe.
#You can obtain the coordinates using the "coordinates" function from the sp library
pm.income.poly.coords <- sp::coordinates(pm.income.poly)
#Observe the result
head(pm.income.poly.coords)
#Now add the coordinates back to the spatialpolygondataframe
pm.income.poly$X <- pm.income.poly.coords[,1]
pm.income.poly$Y <- pm.income.poly.coords[,2]
head(pm.income.poly)

###Determine the bandwidth for GWR: this will take a while
GWRbandwidth <- gwr.sel(pm.income.poly$PM25~pm.income.poly$Income, 
                        data=pm.income.poly, coords=cbind(pm.income.poly$X,pm.income.poly$Y),adapt=T) 

###Perform GWR on the two variables with the bandwidth determined above
###This will take a looooooong while
gwr.model = gwr(pm.income.poly$PM25~pm.income.poly$Income, 
                data=pm.income.poly, coords=cbind(pm.income.poly$X,pm.income.poly$Y), 
                adapt=GWRbandwidth, hatmatrix=TRUE, se.fit=TRUE) 

  #Print the results of the model
gwr.model

#Look at the results in detail
results<-as.data.frame(gwr.model$SDF)
head(results)
View(results)
#Now for the magic. Let's add our local r-square values to the map
pm.income.poly$localr <- results$localR2

#Create choropleth map of r-square values
local.r.square <- pm.income.poly$localr
shades <- auto.shading(local.r.square, n=6, cols = brewer.pal(6, 'Oranges'))
choropleth(income.tracts, local.r.square, shades) #map the data with associated colours
choro.legend(-123.6005,49.2488, shades) #add a legend (you might need to change the location)

#Time for more magic. Let's map the coefficients
pm.income.poly$coeff <- results$pm.income.poly.Income

#Create choropleth map of the coefficients
local.coefficient <- pm.income.poly$coeff
shades <- auto.shading(local.coefficient, n=6, cols = brewer.pal(6, 'Reds'))
choropleth(income.tracts, local.coefficient, shades) #map the data with associated colours
choro.legend(-123.707001,49.24881, shades) #add a legend (you might need to change the location)

#################################
##########point pattern analysis########
###########################

spSample<- spTransform(spSample, CRS("+init=epsg:3005"))
income.tracts <- spTransform(income.tracts, CRS("+init=epsg:3005"))
area(income.tracts)
kma <- spSample

kma$x<-coordinates(kma)[,1]
kma$y<-coordinates(kma)[,2]
zd <- zerodist(kma)
zd
kma <- remove.duplicates(kma)
kma.ext <- as.matrix(extent(kma)) 
window <- as.owin(list(xrange = kma.ext[1,], yrange = kma.ext[2,]))
kma.ppp <- ppp(x = kma$x, y = kma$y, window = window) 
  

  
  #####
  ##Nearest Neighbour Distance
  ###NEAREST NEIGHBOUR
  nearestNeighbour <- nndist(kma.ppp)
  
  
  ##Convert the nearestNeighbor object into a dataframe.
  nearestNeighbour=as.data.frame(as.numeric(nearestNeighbour))
  
  
  ##Change the column name to "Distance"
  
  
  colnames(nearestNeighbour) ="Distance"
  
  NNDN <-nrow(nearestNeighbour)
  
  ##Calculate the nearest neighbor statistic to test for a random spatial distribution.
  
  #mean nearest neighbour
  nnd <- mean(nearestNeighbour$Distance, na.rm = TRUE)
  
  #mean nearest neighbour for random spatial distribution
  
  studyArea <-  2095738543
  pointDensity <-NNDN/studyArea
  
  r.nnd = 1/(2*(sqrt(pointDensity)))
  
  d.nnd = 1.07453/(sqrt(pointDensity))
  
  R = nnd/r.nnd
  
  SE.NND = 0.26136/(sqrt(NNDN*pointDensity)) 
  
  z = (nnd-r.nnd)/SE.NND


#################Map study Area

 
 map_TM <- tm_shape(income.tracts) + #make the main shape
    tm_fill(col = "Income", palette = "seq") +
    tm_layout(aes.palette = list(seq = "-RdYlBu"))+
    tm_borders(col="black", alpha = 0.2)+
    tm_shape(spSample) +
    tm_symbols(col = "purple", alpha = 0.9, size  = 0.1) +
    tm_compass(north=0,position = c("RIGHT","TOP"))+
    tm_scale_bar(position = c("RIGHT","BOTTOM"))+
    tm_add_legend(type = "symbol",labels= "PM 2.5 subsample", col="purple",shape=20)+
    tm_layout(title = "Study Data", title.position = c("LEFT", "TOP"), legend.position = c("LEFT", "BOTTOM"))
   
  
  map_TM
  
   png("TmMapStudyArea.png")
  
  map_TM
  dev.off()
